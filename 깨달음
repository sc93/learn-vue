Vue CLI에서 console 사용하려면 package.json에서 rule : { "no-console": "off" } 추가

라이프 사이클
 - 인스턴스 생성
 - 인스턴스 부착
 - 인스턴스 갱신
 - 인스턴스 소멸

라이프 사이클 속성
 - beforeCreate
	인스턴스 생성 후 제일 먼저 실행되는 속성
	data, methods 속성 정의 안됨
	돔 접근 불가
 - Create
	data, methods 속성이 정의되서 해당 속성에 접근할 수 있는 첫번째 단계
	인스턴스 부착전이라 template속성에 정의된 html요소는 접근불가
	주로 서버에 데이터를 요청하여 받아오는 로직을 수행함.
 - beforeMount
 	template 속성에 지정된 마크업속성을 render()함수로 변환 후 
	el 속성에 지정한 돔에 인스턴스를 부착하기 전 실행되는 속성
 - Mounted
	el 속성에 지정된 돔에 인스턴스요소가 부착되고 난 후 실행되는 속성
	template 속성에 지정된 돔 요소에 접근가능해서 화면 제어하기 좋은 단계
	그러나 돔에 인스턴스가 부착되자마자 접근해서 하위 컴포넌트나 외부 라이브러리에 의해 추가된 화면요소들의 변환 시점과 다를수 있음
	($next.tick() 함수 사용으로 최종 파싱될때까지 기다린 후 돔제어 로직 추가)
 - beforeUpdate
	관찰하고 있는 데이터가 변경되면 가상 돔으로 화면을 다시 그리기 전에 호출되는 단계
	변경 예정인 새 데이터에 접근할 수 있어 변경 예정 데이터의 값과 관련된 로직을 미리 넣을수 있음
	변경 로직을 넣어도 화면이 다시 그려지지 않음
 - Updated
	데이터 변경 후 가상 돔으로 다시 화면을 그리고 난 후 실행되는 단계
	변경 완료된 상태라 화면제어 관련 로직을 추가하기 좋은 단계
	이 단계에서 데이터 변경 로직을 넣으면 무한루프에 빠질수도 있음
	데이터 변경은 computed, watch와 같은 속성을 사용하고 데이터 변경은 beforeUpdate 속성에서 처리
	이 단계는 데이터 변경에 의한 dom요소 제어 로직을 추가하면 좋음
 - beforeDestroy
	인스턴스 파괴되기전 실행단계
	아직 인스턴스 접근가능, 인스턴스 데이터 삭제하기 좋음
 - Destroyed
	인스턴스 파괴 후 실행단계
	모든 속성 제거, 하위 선언한 인스턴스들도 파괴

라우팅 (Routing)
 - 웹페이지간의 이동 방법

템플릿에서 자바스크립트 표현식 사용시 주의할 점
 - 선언문, 분기 구문은 사용불가
 - 복잡한 연산은 인스턴스 안에서 처리
 - 화면에선 간단한 연산 결과만 표시

computed속성
 - 데이터를 가공하는 등의 복잡한 연산을 정의하는 속성
 - computed속성에서 사용하는 data속성 값이 변경되면 자동으로 다시 연산
 - 캐싱 : 동일한 연산을 하지않기 위해 연산의 결과값을 미리 저장하고 있다가 필요할 때 불러오는 동작
 - methods 속성은 호출하면 실행후 연산 computed 속성은 미리 연산후 호출하면 결과값 반환(data 값이 변경되면 자동으로 다시 연산)

watch 속성
 - 데이터 변화를 감지하여 자동으로 특정 로직을 수행
 - computed속성과 비슷한데 computed속성은 내장 API를 활용한 간단한 연산 정도로 적함
 - watch속성은 데이터 호출과 같이 시간이 상대적으로 많이 소모되는 비동기 처리에 적합
 